# ------------------------------------------------------------------------------------------------
# Copyright 2022 by Heqing Huang (feipenghhq@gamil.com)
# Author: Heqing Huang
#
# Date Created: 06/30/2022
# ------------------------------------------------------------------------------------------------
# veriRISCV
# ------------------------------------------------------------------------------------------------
# Load memory from memory file to the memory variable in verilog
# ------------------------------------------------------------------------------------------------

import logging
import sys
import re

def clearMemory(mem, size):
    while size > 0:
        mem[size].value = 0
        size -= 1

def loadFromFile(file, mem):
    """
        Read the memory content from a file.
        - Assume that the file has memory value for each "WORD" line by line
        - The word size of the data should be matching with the word size in verilog memory
        - Address should be continuous and is starting from 0
    """
    _log = logging.getLogger(f"cocotb.RAMLoader")
    FH = open(file, "r")
    size = 0
    lines  = FH.readlines()
    for value in lines:
        mem[size].value = int(value.rstrip(), 16)
        size += 1
    FH.close()
    _log.info(f"Read memory content from file: {file}. Memory size is {str(size * 4)} bytes, {str(size)} words")


def loadFromVerilog(file, mem):
    """
        Read the memory content from the verilog file generated by objdump command.
        Verilog file Format:
        @00000000
        93000000 13010000 93010000 13020000
        93020000 13030000 93030000 13040000
        ......
        F3221034 93824200 73901234 73002030
        731000C0
        @00000310
        01000000 00000000 00000000 00000000
    """
    FH = open(file, "r")
    current_addr = 0
    lines  = FH.readlines()
    for value in lines:
        if '@' in value:    # this is an address line
            addr = int(value.rstrip()[1:], 16)
        else:               # this is a data line
            data = value.split()
            for d in data:
                word_addr = addr >> 2
                mem[word_addr].value = int(d, 16)
                addr = addr + 4
    FH.close()
    _log = logging.getLogger(f"cocotb.RAMLoader")
    _log.info(f"Read memory content from verilog file: {file}")

def loadFromVerilogByte(file, mem):
    """
        Read the memory content from the verilog file generated by objdump command.
        Verilog file Format:
        @00000000
        73 70 04 30 97 11 00 00 93 81 41 CC 17 01 01 00
        13 01 41 FF 13 05 00 4D 93 05 00 4D 63 78 B5 00
        23 20 05 00 13 05 45 00 E3 6C B5 FE 17 05 00 00
        13 05 C5 35 EF 00 40 3A EF 00 80 08 13 05 00 00
        93 05 00 00 EF 00 C0 00 6F 00 40 30 6F 00 00 00
        @00000050
        13 01 01 FD 23 26 81 02 13 04 01 03 23 2E A4 FC
        23 2C B4 FC 93 07 F0 FF 23 24 F4 FE B7 17 00 80
    """
    FH = open(file, "r")
    current_addr = 0
    lines  = FH.readlines()
    for value in lines:
        if '@' in value:    # this is an address line
            addr = int(value.rstrip()[1:], 16)
        else:               # this is a data line
            line = value.split()
            data = [line[i:i+4] for i in range(0, len(line), 4)]
            for d in data:
                word_addr = addr >> 2
                byte = [int(i, 16) for i in d]
                instr = byte[0] | byte[1] << 8 | byte[2] << 16 | byte[3] << 24
                mem[word_addr].value = instr
                addr = addr + 4
    FH.close()
    _log = logging.getLogger(f"cocotb.RAMLoader")
    _log.info(f"Read memory content from verilog file: {file}")
